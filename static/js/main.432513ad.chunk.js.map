{"version":3,"sources":["Form/Form.js","Weather/Weather.js","Unit/Unit.js","City/City.js","App.js","serviceWorker.js","index.js"],"names":["form","props","react_default","a","createElement","className","id","type","name","placeholder","onClick","click","value","weather","city","temp","unit","humidity","sunrise","sunset","windDirection","windspeed","pressure","time","currentUnit","concat","onMouseDown","lock","onTouchStart","onMouseUp","move","onTouchEnd","onMouseMove","drag","onTouchMove","onWheel","preventScroll","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","undefined","precipitation","currentTime","gmtOffset","listOfCities","currentTemp","lat","lon","that","assertThisInitialized","fetch","process","then","response","json","myJson","console","log","coord","toConsumableArray","main","cityId","push","setState","secondsInterval","setInterval","updateTime2","setUnit","event","setTemp","target","innerText","map","deleteCity","cityIndex","cities","splice","whichCity","e","document","body","style","position","getElementById","transform","unify","changedTouches","xAxisLocation","clientX","overflow","dx","dragAmount","Math","sign","match","preventDefault","amount","round","fetchWeather","sun","cityOrZipValue","typeOfQuery","cityObj","test","country","toLowerCase","toFixed","sys","t","Date","hour","getUTCHours","slice","parseInt","formatted","getUTCMinutes","cityAlreadyListed","wind","speed","deg","i","length","showLocalTime","localUTC","localHour","localAMorPM","_this2","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","setTimeout","updateTime","getSeconds","clearInterval","_this3","sunriseUTC","sunriseHour","newSunriseAMorPM","formattedSunrise","sunsetUTC","sunsetHour","newSunsetAMorPM","formattedSunset","windDegrees","Weather","toLocaleTimeString","minute","index","City_City","key","class","Unit_Unit","Form","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister","ontouchmove"],"mappings":"qTAceA,qBAZF,SAACC,GAEV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOE,GAAG,OAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBACrDP,EAAAC,EAAAC,cAAA,SAAOE,GAAG,UAAUC,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC3DP,EAAAC,EAAAC,cAAA,SAAOM,QAAST,EAAMU,MAAOJ,KAAK,SAASK,MAAM,cCa9CC,EApBC,SAACZ,GAIb,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,iCAAyBH,EAAMa,KAA/B,OAAyCb,EAAMc,KAA/C,OACCb,EAAAC,EAAAC,cAAA,YAAOH,EAAMe,OAEdd,EAAAC,EAAAC,cAAA,sBAAcH,EAAMgB,SAApB,KACAf,EAAAC,EAAAC,cAAA,sBAAcH,EAAMiB,SACpBhB,EAAAC,EAAAC,cAAA,sBAAcH,EAAMkB,QACpBjB,EAAAC,EAAAC,cAAA,kBAAUH,EAAMmB,cAAhB,IAAgCnB,EAAMoB,UAAtC,QACAnB,EAAAC,EAAAC,cAAA,uBAAeH,EAAMqB,SAArB,SACApB,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMsB,QCFnBP,EAbF,SAACf,GAIV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAiC,MAAtBJ,EAAMuB,YAAsB,cAAgB,IAAKd,QAAST,EAAMU,OAAhF,UADF,YAEET,EAAAC,EAAAC,cAAA,OAAKC,UAAiC,MAAtBJ,EAAMuB,YAAsB,cAAgB,IAAKd,QAAST,EAAMU,OAAhF,YCqBKG,EA7BF,SAACb,GAEV,OAEIC,EAAAC,EAAAC,cAAA,OAAKE,GAAE,OAAAmB,OAASxB,EAAMK,IAAKD,UAAU,sBACrCqB,YAAazB,EAAM0B,KACnBC,aAAc3B,EAAM0B,KACpBE,UAAW5B,EAAM6B,KACjBC,WAAY9B,EAAM6B,KAClBE,YAAa/B,EAAMgC,KACnBC,YAAajC,EAAMgC,KACnBE,QAASlC,EAAMmC,eAEPlC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,IAA4BJ,EAAMsB,MAClCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYJ,EAAMa,OAErCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMc,KAAV,UAGRb,EAAAC,EAAAC,cAAA,OAAKM,QAAST,EAAMU,MAAOiB,aAAc3B,EAAMU,MAAON,UAAU,aAAhE,YCohBDgC,cAjiBb,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxC,KAIR4C,MAAQ,CACN9B,UAAM+B,EACN9B,KAAM,IACNF,UAAMgC,EACN7B,cAAU6B,EACV5B,aAAS4B,EACT3B,YAAQ2B,EACRzB,eAAWyB,EACX1B,mBAAe0B,EACfC,mBAAeD,EACfE,iBAAaF,EACbG,eAAWH,EACXI,aAAc,IAjBGZ,EAoBnBa,YAAc,SAACC,EAAKC,GAClB,IAGIJ,EACAC,EACApC,EAHAwC,EAAIf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,IAKRkB,MAAK,uDAAA/B,OAAwD2B,EAAxD,SAAA3B,OAAmE4B,EAAnE,WAAA5B,OAPQgC,mCAOR,oBACFC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GACdC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAOrD,MACnBsD,QAAQC,IAAIF,EAAOG,MAAMZ,KACzBF,EAAYX,OAAA0B,EAAA,EAAA1B,CAAOe,EAAKT,MAAMK,cAC9BpC,EAAO,CACLN,KAAMqD,EAAOrD,KACbO,KAAM8C,EAAOK,KAAKnD,KAClBoD,OAAQN,EAAOvD,IAGjB4C,EAAakB,KAAKtD,GAClBwC,EAAKe,SAAS,CACZnB,aAAcA,IAGhBM,MAAK,qDAAA/B,OA1BYgC,eA0BZ,iCAAAhC,OAAoGoC,EAAOG,MAAMZ,IAAjH,SAAA3B,OAA4HoC,EAAOG,MAAMX,MAC3IK,KAAK,SAAUC,GAGd,OAFAG,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,YACLJ,EAASC,SAEjBF,KAAK,SAAUG,GACdZ,EAAYY,EAAOZ,UACjBA,GAAa,KACfa,QAAQC,IAAIF,GACZ/C,EAAKmC,UAAYA,OA1DRX,EAqEnBgC,gBAAkBC,YAChB,kBAAMjC,EAAKkC,eACX,KAvEiBlC,EA2GnBmC,QAAU,SAACC,GAET,IAAIlD,EACAmD,EAEAzB,EAAYX,OAAA0B,EAAA,EAAA1B,CAAOD,EAAKO,MAAMK,cAEH,UAA3BwB,EAAME,OAAOC,WACfrD,EAAc,IAEU,MAApBc,EAAKO,MAAM7B,MACb2D,EAA6B,EAAlBrC,EAAKO,MAAM9B,KAAW,EAAK,GAEtCmC,EAAeA,EAAa4B,IAAI,SAAChE,GAE/B,OADAA,EAAKC,KAAoB,EAAZD,EAAKC,KAAW,EAAK,GAC3BD,KAKT6D,EAAUrC,EAAKO,MAAM9B,OAIvBS,EAAc,IACU,MAApBc,EAAKO,MAAM7B,MACb2D,EAAmC,GAAxBrC,EAAKO,MAAM9B,KAAO,IAAU,EACvCmC,EAAeA,EAAa4B,IAAI,SAAChE,GAE/B,OADAA,EAAKC,KAA0B,GAAlBD,EAAKC,KAAO,IAAU,EAC5BD,KAIT6D,EAAUrC,EAAKO,MAAM9B,MAKzBuB,EAAK+B,SAAS,CACZtD,KAAM4D,EACN3D,KAAMQ,EACN0B,aAAcA,KApJCZ,EAyJnByC,WAAa,SAACC,GACZ,GAAkB,IAAdA,EAAiB,CACnB,IAAMC,EAAM1C,OAAA0B,EAAA,EAAA1B,CAAOD,EAAKO,MAAMK,cAC9B+B,EAAOC,OAAOF,EAAW,GACzB1C,EAAK+B,SAAS,CAAEnB,aAAc+B,MA7Jf3C,EAmKnBX,KAAO,SAACwD,EAAWC,GACjBC,SAASC,KAAKC,MAAMC,SAAW,QAC/B1B,QAAQC,IAAIsB,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,WAC9D5B,QAAQC,IAAIoB,GACZrB,QAAQC,IAAI,aACZ,IAAI4B,EAASP,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,EAEtD9C,EAAKuD,cAAgBF,EAAMG,QAC3BhC,QAAQC,IAAIzB,EAAKuD,eAEjBR,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAY,kBA7K7CpD,EAiLnBR,KAAO,SAACqD,EAAWC,GAKjB,GAJAC,SAASC,KAAKC,MAAMC,SAAW,SAE/BH,SAASC,KAAKC,MAAMQ,SAAU,UAE3BzD,EAAKuD,eAAwC,IAAvBvD,EAAKuD,cAAqB,CACjD,IACIG,GADSZ,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,GACvCU,QAAUxD,EAAKuD,cAM1BI,GAN6CC,KAAKC,KAAKH,GAM1CX,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,YAEnEO,EAAaA,EAAWG,MAAM,QAAQ,IACrB,KACXf,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAY,kBAapEpD,EAAKuD,cAAgB,KAMvB/B,QAAQC,IAAIoB,GACZrB,QAAQC,IAAIzB,EAAKuD,gBAtNAvD,EA0NnBF,cAAgB,SAAC+C,EAAWC,GAE1BA,EAAEiB,iBAEFvC,QAAQC,IAAI,wBA9NKzB,EAiOnBL,KAAO,SAACkD,EAAWC,GAYjB,GAVAA,EAAEiB,iBAEFvC,QAAQC,IAAI,UACZD,QAAQC,IAAIzB,EAAKuD,eAEQ,IAAtBvD,EAAKuD,gBACNR,SAASC,KAAKC,MAAMQ,SAAU,UAI7BzD,EAAKuD,eAAsC,IAAtBvD,EAAKuD,cAAqB,CAChD,IAAIF,EAASP,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,EAEtDtB,QAAQC,IAAI4B,EAAMG,SAClB,IAAIQ,EAASJ,KAAKK,MAAMZ,EAAMG,QAAUxD,EAAKuD,eACzCS,IAAW,KACbA,GAAU,IAGRA,GAAU,IACZA,EAAS,GAKXjB,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAlD,aAAAjE,OAA2E6E,EAA3E,SA5PehE,EAwQnBkE,aAAe,WAEb,IAGIxF,EACAyD,EACA3D,EACAG,EACAK,EAGAmF,EACAxD,EAXAK,EAAIf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,IACJoE,EAAiBrB,SAASI,eAAe,QAAQ7E,MACjD+F,EAAc,IAMdzD,EAAYX,OAAA0B,EAAA,EAAA1B,CAAOD,EAAKO,MAAMK,cAC9B0D,EAAU,GAIV,KAAKC,KAAKH,KACZC,EAAc,OAEhB,IAAIG,EAAUzB,SAASI,eAAe,WAAW7E,MAEnB,kBAA1BkG,EAAQC,gBACVD,EAAU,MAGY,MAApBxE,EAAKO,MAAM7B,MACbA,EAAO,WACPyD,EAAU,MAEVzD,EAAO,SACPyD,EAAU,KAMZjB,MAAK,mDAAA/B,OAAoDkF,EAApD,KAAAlF,OAAmEiF,EAAnE,KAAAjF,OAAqFqF,EAArF,WAAArF,OAHQgC,mCAGR,WAAAhC,OAAsHT,IACxH0C,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GAGd,QAAoBf,IAAhBe,EAAOK,KAAoB,CAC7B,IAAMf,EAAcU,EAAOK,KAAKnD,KAChCD,EAAO+C,EAAOrD,KACdS,EAAW4C,EAAOK,KAAKjD,SACvBK,GAAYuC,EAAOK,KAAK5C,SAAW,iBAAiB0F,QAAQ,GAQ5DxD,MAAK,qDAAA/B,OArBUgC,eAqBV,iCAAAhC,OAAoGoC,EAAOG,MAAMZ,IAAjH,SAAA3B,OAA4HoC,EAAOG,MAAMX,MAC3IK,KAAK,SAAUC,GAKd,OAJA8C,EAAM5C,EAAOoD,IAAI/F,QAEjB4C,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,YACLJ,EAASC,SAEjBF,KAAK,SAAUG,GACd,IAAIqD,EAAI,IAAIC,KAAW,IAANV,GACjBxD,EAAYY,EAAOZ,UACnBA,GAAa,KACba,QAAQC,IAAImD,GACZ,IAAIE,GAAQ,IAAMF,EAAEG,eAAeC,OAAO,GAC1CF,EAAOG,SAASH,GAChBA,GAAQnE,EACRa,QAAQC,IAAR,oBAAAtC,OAAgCwB,IAChC2D,EAAQ3D,UAAWA,EACnBK,EAAKe,SAAS,CACZpB,UAAWA,IAGb,IAAIuE,EAAYJ,EAAO,KAAO,IAAMF,EAAEO,iBAAiBH,OAAO,GAC9DxD,QAAQC,IAAIyD,KAGhB,IAAIE,GAAoB,EAGxBd,EAAQpG,KAAOM,EACf8F,EAAQ7F,KAAMoC,EACdyD,EAAQzC,OAAQN,EAAOvD,GACvBsG,EAAQ1F,QAAS2C,EAAOoD,IAAI/F,QAC5B0F,EAAQzF,OAAQ0C,EAAOoD,IAAI9F,OAC3ByF,EAAQvF,UAAWwC,EAAO8D,KAAKC,MAC/BhB,EAAQxF,cAAeyC,EAAO8D,KAAKE,IACnCjB,EAAQtF,SAAUA,EAIlBwC,QAAQC,IAAR,eAAAtC,OAA2BmF,IAC3B9C,QAAQC,IAAI6C,GAEZ,IAAK,IAAIkB,EAAI,EAAGA,EAAI5E,EAAa6E,OAAQD,IAIvC,GAHAhE,QAAQC,IAAR,yBAAAtC,OAAqCoC,EAAOvD,KAC5CwD,QAAQC,IAAI,YACZD,QAAQC,IAAIb,EAAa4E,GAAG3D,QACxBjB,EAAa4E,GAAG3D,SAAWN,EAAOvD,GAAI,CACxCoH,GAAoB,EACpB,OAIsB,IAAtBA,GACFxE,EAAakB,KAAKwC,GAGpBtD,EAAKe,SAAS,CACZtD,KAAMoC,EACNnC,KAAMyD,EACN3D,KAAMA,EACNG,SAAUA,EACVC,QAAS2C,EAAOoD,IAAI/F,QACpBC,OAAQ0C,EAAOoD,IAAI9F,OACnBE,UAAWwC,EAAO8D,KAAKC,MACvBxG,cAAeyC,EAAO8D,KAAKE,IAC3BvG,SAAUA,EACV4B,aAAcA,QAjYLZ,EA4YnB0F,cAAgB,SAACzG,GACf,IAAI0G,EAAW,IAAId,KAAK7E,EAAKO,MAAMG,aAC/BkF,GAAa,IAAMD,EAASZ,eAAeC,OAAO,GACtDY,EAAYX,SAASW,GAErB,IAAIC,EAAc,KAkBlB,OAnBAD,GAAa3G,GAEE,GACb2G,EAAY,GAAKA,EACjBC,EAAc,MAEPD,EAAY,KACnBC,EAAc,KAGI,KAFjBD,GAAa,MAGZA,EAAY,KAMSA,EAAY,KAAO,IAAMD,EAASR,iBAAiBH,OAAO,GAAKa,GA/ZtF7F,EAAKuD,cAAgB,KAFNvD,mFAyEC,IAAA8F,EAAA3F,KAClB4F,UAAUC,YAAYC,mBACpB,SAAC/C,GACC1B,QAAQC,IAAIyB,EAASgD,OAAOC,UAC5B3E,QAAQC,IAAIyB,EAASgD,OAAOE,WAC5BN,EAAKjF,YAAYqC,EAASgD,OAAOC,SAAUjD,EAASgD,OAAOE,aAG/DC,WACE,kBACEpE,YACE,kBAAM6D,EAAKQ,cACX,MAED,IAAqC,KAA3B,IAAIzB,MAAO0B,mDAK1BpG,KAAK4B,SAAS,CACZrB,YAAa,IAAImE,6CAMa,KAA5B,IAAIA,MAAO0B,cACbC,cAAcrG,KAAK6B,iBAErB7B,KAAK4B,SAAS,CACZrB,YAAa,IAAImE,qCA0Df/B,GAAK,OAAOA,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,mCAsQlD,IAAA2D,EAAAtG,KAEHuG,EAAa,IAAI7B,KAA0B,IAArB1E,KAAKI,MAAM3B,SACjC+H,GAAe,IAAMD,EAAW3B,eAAeC,OAAO,GAC1D2B,EAAc1B,SAAS0B,GAGvB,IAAIC,EAAmB,MAFvBD,GAAexG,KAAKI,MAAMI,WAGR,KAChBiG,EAAmB,KACnBD,GAAe,IAEjB,IAAIE,EAAmBF,EAAc,KAAO,IAAMD,EAAWvB,iBAAiBH,OAAO,GACjF8B,EAAY,IAAIjC,KAAyB,IAApB1E,KAAKI,MAAM1B,QAChCkI,GAAc,IAAMD,EAAU/B,eAAeC,OAAO,GACxD+B,EAAa9B,SAAS8B,GAEtB,IAAIC,EAAkB,MADtBD,GAAc5G,KAAKI,MAAMI,WAER,GACfqG,EAAkB,KAElBD,GAAc,GAGhB,IAEIjI,EAFAmI,EAAkBF,EAAa,KAAO,IAAMD,EAAU3B,iBAAiBH,OAAO,GAC9EvG,EAAO,KAEPyI,EAAc/G,KAAKI,MAAMzB,cAG3BA,EADEoI,EAAc,QAAUA,GAAe,MACzB,IACPA,EAAc,OAASA,GAAe,MAC/B,MACPA,EAAc,OAASA,GAAe,MAC/B,KACPA,EAAc,OAASA,GAAe,MAC/B,MACPA,EAAc,OAASA,GAAe,OAC/B,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KAEA,MAGd/G,KAAKI,MAAM9B,OAEbA,EACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqJ,EAAD,CAAS1I,KAAMmF,KAAKK,MAAM9D,KAAKI,MAAM9B,MAAOC,KAAMyB,KAAKI,MAAM7B,KAAMF,KAAM2B,KAAKI,MAAM/B,KAAMG,SAAUwB,KAAKI,MAAM5B,SAC7GC,QAAO,GAAAO,OAAK0H,EAAL,KAAA1H,OAAyByH,GAChC/H,OAAM,GAAAM,OAAK8H,EAAL,KAAA9H,OAAwB6H,GAC9BjI,UAAW6E,KAAKK,MAAM9D,KAAKI,MAAMxB,WACjCD,cAAeA,EACfE,SAAUmB,KAAKI,MAAMvB,SACrBC,KAAMkB,KAAKI,MAAMG,YAAY0G,mBAAmB,GAAI,CAAEtC,KAAM,UAAWuC,OAAQ,gBAOvF,IAAI1E,EACF/E,EAAAC,EAAAC,cAAA,WAEGqC,KAAKI,MAAMK,aAAa4B,IAAI,SAAChE,EAAM8I,GAClC,OAAO1J,EAAAC,EAAAC,cAACyJ,EAAD,CACL/I,KAAMA,EAAKN,KACXO,KAAMmF,KAAKK,MAAMzF,EAAKC,MACtBC,KAAM+H,EAAKlG,MAAM7B,KACjB8I,IAAKF,EACLtJ,GAAMsJ,EACNjJ,MAAO,kBAAMoI,EAAKhE,WAAW6E,IAC7BrI,KAAMwH,EAAKf,cAAclH,EAAKmC,WAC9BtB,KAAM,SAACyD,GAAD,OAAO2D,EAAKpH,KAAKiI,EAAOxE,IAC9BtD,KAAM,SAACsD,GAAD,OAAO2D,EAAKjH,KAAK8H,EAAOxE,IAC9BnD,KAAQ,SAACmD,GAAD,OAAO2D,EAAK9G,KAAK2H,EAAOxE,IAChChD,cAAiB,SAACgD,GAAD,OAAO2D,EAAK3G,cAAcwH,EAAOxE,SAM1D,OACElF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAK2J,MAAM,qBACR9E,GAID/E,EAAAC,EAAAC,cAAC4J,EAAD,CACErJ,MAAO8B,KAAKgC,QACZjD,YAAaiB,KAAKI,MAAM7B,OAE1Bd,EAAAC,EAAAC,cAAC6J,EAAD,CACEtJ,MAAO8B,KAAK+D,eAEbzF,UA5hBSmJ,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlE,MACvB,2DCZNmE,IAASC,OAAOtK,EAAAC,EAAAC,cAACqK,EAAD,MAASpF,SAASI,eAAe,SD2H3C,kBAAmB4C,WACrBA,UAAUqC,cAAcC,MAAMjH,KAAK,SAAAkH,GACjCA,EAAaC,eCvHnBxF,SAASyF,YAAc,SAAU1F,GAC7BA,EAAEiB","file":"static/js/main.432513ad.chunk.js","sourcesContent":["import React from 'react';\n\nconst form = (props) => {\n\n    return (\n\n        <div className=\"Form\">\n            <input id=\"city\" type=\"text\" name=\"city\" placeholder=\"City or Zipcode\" />\n            <input id=\"country\" type=\"text\" name=\"country\" placeholder=\"Country\"/>\n            <input onClick={props.click} type=\"submit\" value=\"Submit\"/>\n        </div>\n    )\n};\n\nexport default form;","import React from 'react';\n\nconst weather = (props) => {\n\n    \n\n    return (\n\n        <div className=\"Weather\">\n          <p> The current temp in {props.city} is {props.temp} \n          °<span>{props.unit}</span>\n          </p>\n          <p>Humidity: {props.humidity}%</p>\n          <p> Sunrise: {props.sunrise}</p>\n          <p> Sunrise: {props.sunset}</p>\n          <p>Wind: {props.windDirection} {props.windspeed} mph</p>\n          <p> Pressure: {props.pressure} inHg</p>\n          <p>Current Time: {props.time}</p>\n        </div>\n    )\n};\n\nexport default weather;","import React from 'react';\n\nconst unit = (props) => {\n\n    \n\n    return (\n\n        <div className=\"Unit\">\n          <div className={props.currentUnit === \"C\" ? 'currentUnit' : \"d\"} onClick={props.click}> °C</div>&nbsp;/&nbsp;\n          <div className={props.currentUnit === \"F\" ? 'currentUnit' : \"d\"} onClick={props.click}> °F</div>\n        </div>\n    )\n};\n\nexport default unit;","import React from 'react';\n\nconst city = (props) => {\n\n    return (\n\n        <div id={`city${props.id}`}className=\"CityParentContainer\"\n        onMouseDown={props.lock} \n        onTouchStart={props.lock} \n        onMouseUp={props.move} \n        onTouchEnd={props.move} \n        onMouseMove={props.drag}\n        onTouchMove={props.drag} \n        onWheel={props.preventScroll}\n        >\n                <div  className=\"City\">\n                    <div className=\"cityContainerLeft\">\n                        <div className=\"cityTime\"> {props.time}</div>\n                        <div className=\"cityName\">{props.city}</div>\n                    </div>\n                    <div className=\"cityContainerRight\">\n                        <p>{props.temp}°</p>\n                    </div>\n                </div>\n                <div onClick={props.click} onTouchStart={props.click} className=\"deleteBtn\">\n                    Delete\n                </div>\n        </div>\n    )\n};\n\nexport default city;","import React, { Component } from 'react';\nimport './App.css';\nimport './City/City.css';\nimport './Unit/Unit.css';\nimport Form from './Form/Form.js';\nimport Weather from './Weather/Weather.js';\nimport Unit from './Unit/Unit.js';\nimport City from './City/City.js';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n      this.xAxisLocation = null\n  }\n\n  state = {\n    temp: undefined,\n    unit: \"F\",\n    city: undefined,\n    humidity: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    windspeed: undefined,\n    windDirection: undefined,\n    precipitation: undefined,\n    currentTime: undefined,\n    gmtOffset: undefined,\n    listOfCities: []\n  }\n\n  currentTemp = (lat, lon) => {\n    let apiKey = process.env.REACT_APP_API_KEY\n    let timeZoneAPIkey = process.env.REACT_APP_TIMEZONE_API_KEY\n    let that = this\n    let gmtOffset\n    let listOfCities\n    let city\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${apiKey}&units=imperial`)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        console.log(myJson)\n        console.log(myJson.name)\n        console.log(myJson.coord.lat)\n        listOfCities = [...that.state.listOfCities]\n        city = {\n          name: myJson.name,\n          temp: myJson.main.temp,\n          cityId: myJson.id\n        }\n        // city.name = myJson.name\n        listOfCities.push(city)\n        that.setState({\n          listOfCities: listOfCities\n        });\n\n        fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=${timeZoneAPIkey}&format=json&by=position&lat=${myJson.coord.lat}&lng=${myJson.coord.lon}`)\n          .then(function (response) {\n            console.log(response)\n            console.log(\"timezone\")\n            return response.json();\n          })\n          .then(function (myJson) {\n            gmtOffset = myJson.gmtOffset\n              gmtOffset /= 3600\n            console.log(myJson)\n            city.gmtOffset = gmtOffset\n          })\n      })\n\n\n\n\n\n\n  }\n\n  secondsInterval = setInterval(\n    () => this.updateTime2(),\n    1000)\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log(position.coords.latitude)\n        console.log(position.coords.longitude)\n        this.currentTemp(position.coords.latitude, position.coords.longitude)\n      })\n\n    setTimeout(\n      () =>\n        setInterval(\n          () => this.updateTime(),\n          60000)\n\n      , (60000 - ((new Date().getSeconds()) * 1000))\n    )\n  }\n\n  updateTime() {\n    this.setState({\n      currentTime: new Date()\n    });\n  }\n\n  updateTime2() {\n\n    if (new Date().getSeconds() === 0) {\n      clearInterval(this.secondsInterval)\n    }\n    this.setState({\n      currentTime: new Date()\n    });\n  }\n\n  setUnit = (event) => {\n\n    let currentUnit\n    let setTemp\n\n    let listOfCities = [...this.state.listOfCities]\n\n    if (event.target.innerText === \"°F\") {\n      currentUnit = \"F\"\n\n      if (this.state.unit === \"C\") {\n        setTemp = (this.state.temp * 9 / 5) + 32\n\n        listOfCities = listOfCities.map((city) => {\n          city.temp = (city.temp * 9 / 5) + 32\n          return city\n\n        })\n\n      } else {\n        setTemp = this.state.temp\n      }\n\n    } else {\n      currentUnit = \"C\"\n      if (this.state.unit === \"F\") {\n        setTemp = (this.state.temp - 32) * 5 / 9\n        listOfCities = listOfCities.map((city) => {\n          city.temp = (city.temp - 32) * 5 / 9\n          return city\n\n        })\n      } else {\n        setTemp = this.state.temp\n      }\n\n    }\n\n    this.setState({\n      temp: setTemp,\n      unit: currentUnit,\n      listOfCities: listOfCities\n\n    });\n  }\n\n  deleteCity = (cityIndex) => {\n    if (cityIndex !== 0) {\n      const cities = [...this.state.listOfCities];\n      cities.splice(cityIndex, 1);\n      this.setState({ listOfCities: cities });\n    }\n  }\n\n  unify(e) { return e.changedTouches ? e.changedTouches[0] : e };\n\n  lock = (whichCity, e) => {\n    document.body.style.position = \"fixed\"\n    console.log(document.getElementById(`city${whichCity}`).style.transform)\n    console.log(whichCity)\n    console.log(\"djdnjdnjd\")\n    let unify =  e.changedTouches ? e.changedTouches[0] : e\n\n    this.xAxisLocation = unify.clientX\n    console.log(this.xAxisLocation)\n    \n    document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n    \n  } \n\n  move = (whichCity, e) => {\n    document.body.style.position = \"static\"\n\n    document.body.style.overflow =\"visible\"\n\n    if(this.xAxisLocation || this.xAxisLocation === 0) {\n      let unify =  e.changedTouches ? e.changedTouches[0] : e\n      let dx = unify.clientX - this.xAxisLocation, s = Math.sign(dx);\n    \n      // if(s<0)\n\n      // if(document.getElementById(`city${whichCity}`).style.transform <)\n\n      let dragAmount = document.getElementById(`city${whichCity}`).style.transform;\n      // dragAmount = dragAmount.match(/\\d+/g)\n      dragAmount = dragAmount.match(/\\d+/g)[0]\n      if (dragAmount < 80) {\n            document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n          }\n      // if(dragAmount.length>0) {\n      //   dragAmount = dragAmount[0]\n      //   if (dragAmount < 80) {\n      //     document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n      //   }\n      // }\n      \n\n      // console.log(document.getElementById(`city${whichCity}`).style.transform)\n      // document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n    \n      this.xAxisLocation = null\n      \n    }\n\n  \n\n    console.log(whichCity)\n    console.log(this.xAxisLocation)\n    // document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n  }\n\n  preventScroll = (whichCity, e) => { \n\n    e.preventDefault();\n\n    console.log(\"Whyis it scrolling?\")\n  }\n\n  drag = (whichCity, e) => {\n\n    e.preventDefault();\n\n    console.log(\"moving\")\n    console.log(this.xAxisLocation)\n\n    if(this.xAxisLocation!== 0) {\n      document.body.style.overflow =\"hidden\"\n    }\n    \n  \n    if(this.xAxisLocation|| this.xAxisLocation=== 0)  {\n      let unify =  e.changedTouches ? e.changedTouches[0] : e\n\n      console.log(unify.clientX)\n      let amount = Math.round(unify.clientX - this.xAxisLocation)\n      if (amount <= -80) {\n        amount = -80\n      }\n\n      if (amount >= 0) {\n        amount = 0\n      }\n\n     \n      \n      document.getElementById(`city${whichCity}`).style.transform = `translate(${amount}px)`\n      // _C.style.setProperty('--tx', `${Math.round(unify(e).clientX - x0)}px`)\n\n\n      \n    }\n  };\n\n  \n\n\n\n  fetchWeather = () => {\n\n    let that = this\n    let cityOrZipValue = document.getElementById(\"city\").value\n    let typeOfQuery = 'q'\n    let unit\n    let setUnit\n    let city\n    let humidity\n    let pressure\n    let listOfCities = [...this.state.listOfCities]\n    let cityObj = {}\n    let sun\n    let gmtOffset\n\n    if (/\\d/.test(cityOrZipValue)) {\n      typeOfQuery = 'zip'\n    }\n    let country = document.getElementById(\"country\").value\n\n    if (country.toLowerCase() === \"united states\") {\n      country = 'us'\n    }\n\n    if (this.state.unit === \"F\") {\n      unit = 'imperial'\n      setUnit = \"F\"\n    } else {\n      unit = 'metric'\n      setUnit = \"C\"\n    }\n\n    let apiKey = process.env.REACT_APP_API_KEY\n    let timeZoneAPIkey = process.env.REACT_APP_TIMEZONE_API_KEY\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?${typeOfQuery}=${cityOrZipValue},${country}&APPID=${apiKey}&units=${unit}`)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n\n\n        if (myJson.main !== undefined) {\n          const currentTemp = myJson.main.temp\n          city = myJson.name\n          humidity = myJson.main.humidity\n          pressure = (myJson.main.pressure / 33.863886666667).toFixed(2)\n\n          // cityObj = {\n          //   name: city,\n          //   temp: currentTemp,\n          //   cityId: myJson.id\n          // }\n\n          fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=${timeZoneAPIkey}&format=json&by=position&lat=${myJson.coord.lat}&lng=${myJson.coord.lon}`)\n            .then(function (response) {\n              sun = myJson.sys.sunrise\n\n              console.log(response)\n              console.log(\"timezone\")\n              return response.json();\n            })\n            .then(function (myJson) {\n              var t = new Date(sun * 1000);\n              gmtOffset = myJson.gmtOffset\n              gmtOffset /= 3600\n              console.log(t)\n              let hour = ('0' + t.getUTCHours()).slice(-2)\n              hour = parseInt(hour)\n              hour += gmtOffset\n              console.log(`The GMTOFFSET is ${gmtOffset}`)\n              cityObj.gmtOffset= gmtOffset\n              that.setState({\n                gmtOffset: gmtOffset\n              });\n\n              var formatted = hour + ':' + ('0' + t.getUTCMinutes()).slice(-2);\n              console.log(formatted)\n            })\n\n          let cityAlreadyListed = false\n\n      \n          cityObj.name = city\n          cityObj.temp= currentTemp\n          cityObj.cityId= myJson.id\n          cityObj.sunrise= myJson.sys.sunrise\n          cityObj.sunset= myJson.sys.sunset\n          cityObj.windspeed= myJson.wind.speed\n          cityObj.windDirection= myJson.wind.deg\n          cityObj.pressure= pressure\n          \n          \n\n          console.log(`Motha Fucka ${cityObj}`)\n          console.log(cityObj)\n\n          for (let i = 0; i < listOfCities.length; i++) {\n            console.log(`cityId just search is ${myJson.id}`)\n            console.log(\"blahBlah\")\n            console.log(listOfCities[i].cityId)\n            if (listOfCities[i].cityId === myJson.id) {\n              cityAlreadyListed = true\n              break\n            }\n          }\n\n          if (cityAlreadyListed === false) {\n            listOfCities.push(cityObj)\n          }\n\n          that.setState({\n            temp: currentTemp,\n            unit: setUnit,\n            city: city,\n            humidity: humidity,\n            sunrise: myJson.sys.sunrise,\n            sunset: myJson.sys.sunset,\n            windspeed: myJson.wind.speed,\n            windDirection: myJson.wind.deg,\n            pressure: pressure,\n            listOfCities: listOfCities\n          });\n        }\n      })\n\n\n\n\n\n  }\n\n  showLocalTime = (time) => {\n    var localUTC = new Date(this.state.currentTime);\n    let localHour = ('0' + localUTC.getUTCHours()).slice(-2)\n    localHour = parseInt(localHour)\n    localHour += time\n    let localAMorPM = \"AM\"\n    if(localHour < 0) {\n      localHour = 12 + localHour\n      localAMorPM = \"PM\"\n    }\n    else if (localHour > 11) {\n      localAMorPM = \"PM\"\n       localHour -= 12\n\n       if(localHour === 0) {\n        localHour = 12\n       }\n\n    } \n      \n    \n    var formattedlocalTime = localHour + ':' + ('0' + localUTC.getUTCMinutes()).slice(-2) + localAMorPM;\n\n    return formattedlocalTime\n\n  }\n\n  render() {\n\n    var sunriseUTC = new Date(this.state.sunrise * 1000);\n    let sunriseHour = ('0' + sunriseUTC.getUTCHours()).slice(-2)\n    sunriseHour = parseInt(sunriseHour)\n    sunriseHour += this.state.gmtOffset\n\n    let newSunriseAMorPM = \"AM\"\n    if (sunriseHour > 11) {\n      newSunriseAMorPM = \"PM\"\n      sunriseHour -= 12\n    }\n    var formattedSunrise = sunriseHour + ':' + ('0' + sunriseUTC.getUTCMinutes()).slice(-2);\n    var sunsetUTC = new Date(this.state.sunset * 1000);\n    let sunsetHour = ('0' + sunsetUTC.getUTCHours()).slice(-2)\n    sunsetHour = parseInt(sunsetHour)\n    sunsetHour += this.state.gmtOffset\n    let newSunsetAMorPM = \"PM\"\n    if (sunsetHour < 12) {\n      newSunsetAMorPM = \"AM\"\n    } else {\n      sunsetHour -= 12\n    }\n      \n    var formattedSunset = sunsetHour + ':' + ('0' + sunsetUTC.getUTCMinutes()).slice(-2);\n    let temp = null\n    let windDirection\n    let windDegrees = this.state.windDirection\n\n    if (windDegrees > 348.75 || windDegrees <= 11.25) {\n      windDirection = \"E\"\n    } else if (windDegrees > 11.25 || windDegrees <= 33.75) {\n      windDirection = \"NNE\"\n    } else if (windDegrees > 33.75 || windDegrees <= 56.25) {\n      windDirection = \"NE\"\n    } else if (windDegrees > 56.25 || windDegrees <= 78.75) {\n      windDirection = \"ENE\"\n    } else if (windDegrees > 78.75 || windDegrees <= 101.25) {\n      windDirection = \"E\"\n    } else if (windDegrees > 101.25 || windDegrees <= 123.75) {\n      windDirection = \"ESE\"\n    } else if (windDegrees > 123.75 || windDegrees <= 146.25) {\n      windDirection = \"SE\"\n    } else if (windDegrees > 146.25 || windDegrees <= 168.75) {\n      windDirection = \"SSE\"\n    } else if (windDegrees > 168.75 || windDegrees <= 191.25) {\n      windDirection = \"S\"\n    } else if (windDegrees > 191.25 || windDegrees <= 213.75) {\n      windDirection = \"SSW\"\n    } else if (windDegrees > 213.75 || windDegrees <= 236.25) {\n      windDirection = \"SW\"\n    } else if (windDegrees > 236.25 || windDegrees <= 258.75) {\n      windDirection = \"WSW\"\n    } else if (windDegrees > 258.75 || windDegrees <= 281.25) {\n      windDirection = \"W\"\n    } else if (windDegrees > 281.25 || windDegrees <= 303.75) {\n      windDirection = \"WNW\"\n    } else if (windDegrees > 303.75 || windDegrees <= 326.25) {\n      windDirection = \"NW\"\n    } else {\n      windDirection = \"NNW\"\n    }\n\n    if (this.state.temp) {\n\n      temp = (\n        <div>\n          <Weather temp={Math.round(this.state.temp)} unit={this.state.unit} city={this.state.city} humidity={this.state.humidity}\n            sunrise={`${formattedSunrise} ${newSunriseAMorPM}`}\n            sunset={`${formattedSunset} ${newSunsetAMorPM}`}\n            windspeed={Math.round(this.state.windspeed)}\n            windDirection={windDirection}\n            pressure={this.state.pressure}\n            time={this.state.currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n            \n          />\n        </div>\n      )\n    }\n\n    let cities = (\n      <div>\n\n        {this.state.listOfCities.map((city, index) => {\n          return <City\n            city={city.name}\n            temp={Math.round(city.temp)}\n            unit={this.state.unit}\n            key={index}\n            id = {index}\n            click={() => this.deleteCity(index)}\n            time={this.showLocalTime(city.gmtOffset)}\n            lock={(e) => this.lock(index, e)}\n            move={(e) => this.move(index, e)}\n            drag = {(e) => this.drag(index, e)}\n            preventScroll = {(e) => this.preventScroll(index, e)}\n          />\n        })}\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n      <div class=\"cityListContainer\">\n        {cities}\n        </div>\n      \n\n        <Unit\n          click={this.setUnit}\n          currentUnit={this.state.unit}\n        />\n        <Form\n          click={this.fetchWeather}\n        />\n        {temp}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\ndocument.ontouchmove = function (e) {\n    e.preventDefault();\n  }\n//   var vpH = window.innerHeight;\n//   document.documentElement.style.height = vpH.toString() + \"px\";\n//   document.body.style.height = vpH.toString() + \"px\";"],"sourceRoot":""}