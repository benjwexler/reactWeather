{"version":3,"sources":["Form/Form.js","Weather/Weather.js","Unit/Unit.js","City/City.js","App.js","serviceWorker.js","index.js"],"names":["form","props","react_default","a","createElement","className","id","type","name","placeholder","onClick","click","value","hideSearchScreen","weather","city","temp","unit","humidity","sunrise","sunset","windDirection","windspeed","pressure","time","currentUnit","concat","onMouseDown","lock","onTouchStart","onMouseUp","move","onTouchEnd","onMouseMove","drag","onTouchMove","onWheel","preventScroll","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","undefined","precipitation","currentTime","gmtOffset","listOfCities","showSearchScreen","currentTemp","lat","lon","that","assertThisInitialized","fetch","process","then","response","json","myJson","console","log","coord","toConsumableArray","main","cityId","push","setState","secondsInterval","setInterval","updateTime2","setUnit","event","target","innerText","map","deleteCity","cityIndex","cities","splice","whichCity","e","document","body","style","position","getElementById","transform","unify","changedTouches","xAxisLocation","clientX","overflow","dx","dragAmount","Math","sign","match","preventDefault","amount","round","updateCity","cityObj","newNonsense","nonsense","i","length","fetchWeather","sun","cityOrZipValue","typeOfQuery","test","country","toLowerCase","toFixed","sys","t","Date","hour","getUTCHours","slice","parseInt","formatted","getUTCMinutes","cityAlreadyListed","wind","speed","deg","showLocalTime","localUTC","localHour","localAMorPM","clicker","_this2","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","setTimeout","updateTime","getSeconds","clearInterval","_this3","sunriseUTC","sunriseHour","newSunriseAMorPM","formattedSunrise","sunsetUTC","sunsetHour","newSunsetAMorPM","formattedSunset","windDegrees","Weather","toLocaleTimeString","minute","showOrHide","index","City_City","key","searchScreen","Form_Form","index_es","icon","faPlus","Unit_Unit","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister","ontouchmove"],"mappings":"4UAiBeA,2BAdF,SAACC,GAEV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXH,EAAAC,EAAAC,cAAA,SAAOE,GAAG,OAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBACrDP,EAAAC,EAAAC,cAAA,SAAOE,GAAG,UAAUC,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC3DP,EAAAC,EAAAC,cAAA,SAAOM,QAAST,EAAMU,MAAOJ,KAAK,SAASK,MAAM,WACjDV,EAAAC,EAAAC,cAAA,OAAKM,QAAST,EAAMY,kBAApB,UCUGC,EApBC,SAACb,GAIb,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,iCAAyBH,EAAMc,KAA/B,OAAyCd,EAAMe,KAA/C,OACCd,EAAAC,EAAAC,cAAA,YAAOH,EAAMgB,OAEdf,EAAAC,EAAAC,cAAA,sBAAcH,EAAMiB,SAApB,KACAhB,EAAAC,EAAAC,cAAA,sBAAcH,EAAMkB,SACpBjB,EAAAC,EAAAC,cAAA,sBAAcH,EAAMmB,QACpBlB,EAAAC,EAAAC,cAAA,kBAAUH,EAAMoB,cAAhB,IAAgCpB,EAAMqB,UAAtC,QACApB,EAAAC,EAAAC,cAAA,uBAAeH,EAAMsB,SAArB,SACArB,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMuB,QCFnBP,EAbF,SAAChB,GAIV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAiC,MAAtBJ,EAAMwB,YAAsB,cAAgB,KAAMf,QAAST,EAAMU,OAAjF,UADF,YAEET,EAAAC,EAAAC,cAAA,OAAKC,UAAiC,MAAtBJ,EAAMwB,YAAsB,cAAgB,KAAMf,QAAST,EAAMU,OAAjF,YCqBKI,EA7BF,SAACd,GAEV,OAEIC,EAAAC,EAAAC,cAAA,OAAKE,GAAE,OAAAoB,OAASzB,EAAMK,IAAKD,UAAU,sBACrCsB,YAAa1B,EAAM2B,KACnBC,aAAc5B,EAAM2B,KACpBE,UAAW7B,EAAM8B,KACjBC,WAAY/B,EAAM8B,KAClBE,YAAahC,EAAMiC,KACnBC,YAAalC,EAAMiC,KACnBE,QAASnC,EAAMoC,eAEPnC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,IAA4BJ,EAAMuB,MAClCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYJ,EAAMc,OAErCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMe,KAAV,UAGRd,EAAAC,EAAAC,cAAA,OAAKM,QAAST,EAAMU,MAAOkB,aAAc5B,EAAMU,MAAON,UAAU,aAAhE,4BColBDiC,cA9lBb,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzC,KAIR6C,MAAQ,CACN9B,UAAM+B,EACN9B,KAAM,IACNF,UAAMgC,EACN7B,cAAU6B,EACV5B,aAAS4B,EACT3B,YAAQ2B,EACRzB,eAAWyB,EACX1B,mBAAe0B,EACfC,mBAAeD,EACfE,iBAAaF,EACbG,eAAWH,EACXI,aAAc,GACdC,kBAAkB,GAlBDb,EAqBnBc,YAAc,SAACC,EAAKC,GAClB,IAGIL,EACAC,EACApC,EAHAyC,EAAIhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,IAKRmB,MAAK,uDAAAhC,OAAwD4B,EAAxD,SAAA5B,OAAmE6B,EAAnE,WAAA7B,OAPQiC,mCAOR,oBACFC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GACdC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAOvD,MACnBwD,QAAQC,IAAIF,EAAOG,MAAMZ,KACzBH,EAAYX,OAAA2B,EAAA,EAAA3B,CAAOgB,EAAKV,MAAMK,cAC9BpC,EAAO,CACLP,KAAMuD,EAAOvD,KACbQ,KAAM+C,EAAOK,KAAKpD,KAClBqD,OAAQN,EAAOzD,IAGjB6C,EAAamB,KAAKvD,GAClByC,EAAKe,SAAS,CACZpB,aAAcA,IAGhBO,MAAK,qDAAAhC,OA1BYiC,eA0BZ,iCAAAjC,OAAoGqC,EAAOG,MAAMZ,IAAjH,SAAA5B,OAA4HqC,EAAOG,MAAMX,MAC3IK,KAAK,SAAUC,GAGd,OAFAG,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,YACLJ,EAASC,SAEjBF,KAAK,SAAUG,GACdb,EAAYa,EAAOb,UACnBA,GAAa,KACbc,QAAQC,IAAIF,GACZhD,EAAKmC,UAAYA,OA3DRX,EAiEnBiC,gBAAkBC,YAChB,kBAAMlC,EAAKmC,eACX,KAnEiBnC,EAuGnBoC,QAAU,SAACC,GAET,IAAInD,EAGA0B,EAAYX,OAAA2B,EAAA,EAAA3B,CAAOD,EAAKO,MAAMK,cAEH,UAA3ByB,EAAMC,OAAOC,WACfrD,EAAc,IAEU,MAApBc,EAAKO,MAAM7B,MACgB,EAAlBsB,EAAKO,MAAM9B,KAAW,EAAK,GAEtCmC,EAAeA,EAAa4B,IAAI,SAAChE,GAE/B,OADAA,EAAKC,KAAoB,EAAZD,EAAKC,KAAW,EAAK,GAC3BD,KAKCwB,EAAKO,MAAM9B,OAIvBS,EAAc,IACU,MAApBc,EAAKO,MAAM7B,MACsB,GAAxBsB,EAAKO,MAAM9B,KAAO,IAAU,EACvCmC,EAAeA,EAAa4B,IAAI,SAAChE,GAE/B,OADAA,EAAKC,KAA0B,GAAlBD,EAAKC,KAAO,IAAU,EAC5BD,KAICwB,EAAKO,MAAM9B,MAKzBuB,EAAKgC,SAAS,CACZpB,aAAcA,EACdlC,KAAMQ,KA/ISc,EAoJnByC,WAAa,SAACC,GACZ,GAAkB,IAAdA,EAAiB,CACnB,IAAMC,EAAM1C,OAAA2B,EAAA,EAAA3B,CAAOD,EAAKO,MAAMK,cAC9B+B,EAAOC,OAAOF,EAAW,GACzB1C,EAAKgC,SAAS,CAAEpB,aAAc+B,MAxJf3C,EA8JnBX,KAAO,SAACwD,EAAWC,GACjBC,SAASC,KAAKC,MAAMC,SAAW,QAC/BzB,QAAQC,IAAIqB,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,WAC9D3B,QAAQC,IAAImB,GACZpB,QAAQC,IAAI,aACZ,IAAI2B,EAAQP,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,EAErD9C,EAAKuD,cAAgBF,EAAMG,QAC3B/B,QAAQC,IAAI1B,EAAKuD,eAEjBR,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAY,kBAxK7CpD,EA4KnBR,KAAO,SAACqD,EAAWC,GAKjB,GAJAC,SAASC,KAAKC,MAAMC,SAAW,SAE/BH,SAASC,KAAKC,MAAMQ,SAAW,UAE3BzD,EAAKuD,eAAwC,IAAvBvD,EAAKuD,cAAqB,CAClD,IACIG,GADQZ,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,GACtCU,QAAUxD,EAAKuD,cAE1BI,GAF6CC,KAAKC,KAAKH,GAE1CX,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,YACnEO,EAAaA,EAAWG,MAAM,QAAQ,IACrB,KACff,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAY,kBAEhEpD,EAAKuD,cAAgB,OA1LNvD,EA+LnBF,cAAgB,SAAC+C,EAAWC,GAE1BA,EAAEiB,iBAEFtC,QAAQC,IAAI,wBAnMK1B,EAsMnBL,KAAO,SAACkD,EAAWC,GAOjB,GANAA,EAAEiB,iBAEyB,IAAvB/D,EAAKuD,gBACPR,SAASC,KAAKC,MAAMQ,SAAW,UAG7BzD,EAAKuD,eAAwC,IAAvBvD,EAAKuD,cAAqB,CAClD,IAAIF,EAAQP,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,EACjDkB,EAASJ,KAAKK,MAAMZ,EAAMG,QAAUxD,EAAKuD,eAEzCS,IAAW,KACbA,GAAU,IAERA,GAAU,IACZA,EAAS,GAEXjB,SAASI,eAAT,OAAAhE,OAA+B0D,IAAaI,MAAMG,UAAlD,aAAAjE,OAA2E6E,EAA3E,SAvNehE,EA2NnBkE,WAAa,SAACC,GAEZ,IAAIC,EAAcpE,EAAKO,MAAM8D,SAC7BD,IAEA,IAEI1F,EAFAuC,EAAIhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,IAIJY,EAAYX,OAAA2B,EAAA,EAAA3B,CAAOD,EAAKO,MAAMK,cAE9BkB,EAASqC,EAAQrC,OAEG,MAApB9B,EAAKO,MAAM7B,KACbA,EAAO,WAGPA,EAAO,SAITyC,MAAK,sDAAAhC,OAAuD2C,EAAvD,WAAA3C,OAXQiC,mCAWR,WAAAjC,OAAuFT,IACzF2C,KAAK,SAAUC,GACd,OAAOA,EAASC,SACfF,KAAK,SAAUG,GAGhB,QAAoBhB,IAAhBgB,EAAOK,KAAoB,CAC7B,IAAMf,EAAcU,EAAOK,KAAKpD,KAChCgD,QAAQC,IAAIZ,GAEZ,IAAK,IAAIwD,EAAI,EAAGA,EAAI1D,EAAa2D,OAAQD,IAEvC,GAAI1D,EAAa0D,GAAGxC,SAAWA,EAAQ,CACrClB,EAAa0D,GAAG7F,KAAOqC,EACvB,MAIJG,EAAKe,SAAS,CACZpB,aAAcA,EACdyD,SAAUD,QApQDpE,EAgRnBwE,aAAe,WAEb,IAGI9F,EACA0D,EACA5D,EACAG,EACAK,EAGAyF,EACA9D,EAXAM,EAAIhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,IACJ0E,EAAiB3B,SAASI,eAAe,QAAQ9E,MACjDsG,EAAc,IAMd/D,EAAYX,OAAA2B,EAAA,EAAA3B,CAAOD,EAAKO,MAAMK,cAC9BuD,EAAU,GAIV,KAAKS,KAAKF,KACZC,EAAc,OAEhB,IAAIE,EAAU9B,SAASI,eAAe,WAAW9E,MAEnB,kBAA1BwG,EAAQC,gBACVD,EAAU,MAGY,MAApB7E,EAAKO,MAAM7B,MACbA,EAAO,WACP0D,EAAU,MAEV1D,EAAO,SACP0D,EAAU,KAMZjB,MAAK,mDAAAhC,OAAoDwF,EAApD,KAAAxF,OAAmEuF,EAAnE,KAAAvF,OAAqF0F,EAArF,WAAA1F,OAHQiC,mCAGR,WAAAjC,OAAsHT,IACxH2C,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GAGd,QAAoBhB,IAAhBgB,EAAOK,KAAoB,CAC7B,IAAMf,EAAcU,EAAOK,KAAKpD,KAChCD,EAAOgD,EAAOvD,KACdU,EAAW6C,EAAOK,KAAKlD,SACvBK,GAAYwC,EAAOK,KAAK7C,SAAW,iBAAiB+F,QAAQ,GAQ5D5D,MAAK,qDAAAhC,OArBUiC,eAqBV,iCAAAjC,OAAoGqC,EAAOG,MAAMZ,IAAjH,SAAA5B,OAA4HqC,EAAOG,MAAMX,MAC3IK,KAAK,SAAUC,GAKd,OAJAmD,EAAMjD,EAAOwD,IAAIpG,QAEjB6C,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,YACLJ,EAASC,SAEjBF,KAAK,SAAUG,GACd,IAAIyD,EAAI,IAAIC,KAAW,IAANT,GACjB9D,EAAYa,EAAOb,UACnBA,GAAa,KACbc,QAAQC,IAAIuD,GACZ,IAAIE,GAAQ,IAAMF,EAAEG,eAAeC,OAAO,GAC1CF,EAAOG,SAASH,GAChBA,GAAQxE,EACRc,QAAQC,IAAR,oBAAAvC,OAAgCwB,IAChCwD,EAAQxD,UAAYA,EACpBM,EAAKe,SAAS,CACZrB,UAAWA,IAGb,IAAI4E,EAAYJ,EAAO,KAAO,IAAMF,EAAEO,iBAAiBH,OAAO,GAC9D5D,QAAQC,IAAI6D,KAGhB,IAAIE,GAAoB,EAGxBtB,EAAQlG,KAAOO,EACf2F,EAAQ1F,KAAOqC,EACfqD,EAAQrC,OAASN,EAAOzD,GACxBoG,EAAQvF,QAAU4C,EAAOwD,IAAIpG,QAC7BuF,EAAQtF,OAAS2C,EAAOwD,IAAInG,OAC5BsF,EAAQpF,UAAYyC,EAAOkE,KAAKC,MAChCxB,EAAQrF,cAAgB0C,EAAOkE,KAAKE,IACpCzB,EAAQnF,SAAWA,EAInByC,QAAQC,IAAR,eAAAvC,OAA2BgF,IAC3B1C,QAAQC,IAAIyC,GAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAI1D,EAAa2D,OAAQD,IAIvC,GAHA7C,QAAQC,IAAR,yBAAAvC,OAAqCqC,EAAOzD,KAC5C0D,QAAQC,IAAI,YACZD,QAAQC,IAAId,EAAa0D,GAAGxC,QACxBlB,EAAa0D,GAAGxC,SAAWN,EAAOzD,GAAI,CACxC0H,GAAoB,EACpB,OAIsB,IAAtBA,GACF7E,EAAamB,KAAKoC,GAGpBjC,YACE,kBAAMjB,EAAKiD,WAAWC,IACtB,KAEFlD,EAAKe,SAAS,CACZvD,KAAMqC,EACNpC,KAAM0D,EACN5D,KAAMA,EACNG,SAAUA,EACVC,QAAS4C,EAAOwD,IAAIpG,QACpBC,OAAQ2C,EAAOwD,IAAInG,OACnBE,UAAWyC,EAAOkE,KAAKC,MACvB7G,cAAe0C,EAAOkE,KAAKE,IAC3B5G,SAAUA,EACV4B,aAAcA,QA7YLZ,EA0ZnB6F,cAAgB,SAAC5G,GACf,IAAI6G,EAAW,IAAIZ,KAAKlF,EAAKO,MAAMG,aAC/BqF,GAAa,IAAMD,EAASV,eAAeC,OAAO,GACtDU,EAAYT,SAASS,GAErB,IAAIC,EAAc,KAkBlB,OAnBAD,GAAa9G,GAEG,GACd8G,EAAY,GAAKA,EACjBC,EAAc,MAEPD,EAAY,KACnBC,EAAc,KAGI,KAFlBD,GAAa,MAGXA,EAAY,KAMSA,EAAY,KAAO,IAAMD,EAASN,iBAAiBH,OAAO,GAAKW,GA/avEhG,EAqbnBiG,QAAU,WAERjG,EAAKgC,SAAS,CACZnB,kBAAmBb,EAAKO,MAAMM,oBAtbhCb,EAAKuD,cAAgB,KAFJvD,mFAqEC,IAAAkG,EAAA/F,KAClBgG,UAAUC,YAAYC,mBACpB,SAACnD,GACCzB,QAAQC,IAAIwB,EAASoD,OAAOC,UAC5B9E,QAAQC,IAAIwB,EAASoD,OAAOE,WAC5BN,EAAKpF,YAAYoC,EAASoD,OAAOC,SAAUrD,EAASoD,OAAOE,aAG/DC,WACE,kBACEvE,YACE,kBAAMgE,EAAKQ,cACX,MAED,IAAqC,KAA3B,IAAIxB,MAAOyB,mDAK1BxG,KAAK6B,SAAS,CACZtB,YAAa,IAAIwE,6CAMa,KAA5B,IAAIA,MAAOyB,cACbC,cAAczG,KAAK8B,iBAErB9B,KAAK6B,SAAS,CACZtB,YAAa,IAAIwE,qCAyDfpC,GAAK,OAAOA,EAAEQ,eAAiBR,EAAEQ,eAAe,GAAKR,mCAgSlD,IAAA+D,EAAA1G,KAEH2G,EAAa,IAAI5B,KAA0B,IAArB/E,KAAKI,MAAM3B,SACjCmI,GAAe,IAAMD,EAAW1B,eAAeC,OAAO,GAC1D0B,EAAczB,SAASyB,GAGvB,IAAIC,EAAmB,MAFvBD,GAAe5G,KAAKI,MAAMI,WAGR,KAChBqG,EAAmB,KACnBD,GAAe,IAEjB,IAAIE,EAAmBF,EAAc,KAAO,IAAMD,EAAWtB,iBAAiBH,OAAO,GACjF6B,EAAY,IAAIhC,KAAyB,IAApB/E,KAAKI,MAAM1B,QAChCsI,GAAc,IAAMD,EAAU9B,eAAeC,OAAO,GACxD8B,EAAa7B,SAAS6B,GAEtB,IAAIC,EAAkB,MADtBD,GAAchH,KAAKI,MAAMI,WAER,GACfyG,EAAkB,KAElBD,GAAc,GAGhB,IAEIrI,EAFAuI,EAAkBF,EAAa,KAAO,IAAMD,EAAU1B,iBAAiBH,OAAO,GAC9E5G,EAAO,KAEP6I,EAAcnH,KAAKI,MAAMzB,cAG3BA,EADEwI,EAAc,QAAUA,GAAe,MACzB,IACPA,EAAc,OAASA,GAAe,MAC/B,MACPA,EAAc,OAASA,GAAe,MAC/B,KACPA,EAAc,OAASA,GAAe,MAC/B,MACPA,EAAc,OAASA,GAAe,OAC/B,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,IACPA,EAAc,QAAUA,GAAe,OAChC,MACPA,EAAc,QAAUA,GAAe,OAChC,KAEA,MAGdnH,KAAKI,MAAM9B,OAEbA,EACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0J,EAAD,CAAS9I,KAAMmF,KAAKK,MAAM9D,KAAKI,MAAM9B,MAAOC,KAAMyB,KAAKI,MAAM7B,KAAMF,KAAM2B,KAAKI,MAAM/B,KAAMG,SAAUwB,KAAKI,MAAM5B,SAC7GC,QAAO,GAAAO,OAAK8H,EAAL,KAAA9H,OAAyB6H,GAChCnI,OAAM,GAAAM,OAAKkI,EAAL,KAAAlI,OAAwBiI,GAC9BrI,UAAW6E,KAAKK,MAAM9D,KAAKI,MAAMxB,WACjCD,cAAeA,EACfE,SAAUmB,KAAKI,MAAMvB,SACrBC,KAAMkB,KAAKI,MAAMG,YAAY8G,mBAAmB,GAAI,CAAErC,KAAM,UAAWsC,OAAQ,gBAOvF,IAsBIC,EAtBA/E,EACFhF,EAAAC,EAAAC,cAAA,WAEGsC,KAAKI,MAAMK,aAAa4B,IAAI,SAAChE,EAAMmJ,GAClC,OAAOhK,EAAAC,EAAAC,cAAC+J,EAAD,CACLpJ,KAAMA,EAAKP,KACXQ,KAAMmF,KAAKK,MAAMzF,EAAKC,MACtBC,KAAMmI,EAAKtG,MAAM7B,KACjBmJ,IAAKF,EACL5J,GAAI4J,EACJvJ,MAAO,kBAAMyI,EAAKpE,WAAWkF,IAC7B1I,KAAM4H,EAAKhB,cAAcrH,EAAKmC,WAC9BtB,KAAM,SAACyD,GAAD,OAAO+D,EAAKxH,KAAKsI,EAAO7E,IAC9BtD,KAAM,SAACsD,GAAD,OAAO+D,EAAKrH,KAAKmI,EAAO7E,IAC9BnD,KAAM,SAACmD,GAAD,OAAO+D,EAAKlH,KAAKgI,EAAO7E,IAC9BhD,cAAe,SAACgD,GAAD,OAAO+D,EAAK/G,cAAc6H,EAAO7E,SAStD4E,GADkC,IAAhCvH,KAAKI,MAAMM,iBACA,aAEA,aAQf,IAAIiH,EAGFnK,EAAAC,EAAAC,cAAA,OAAKC,UAAW4J,GACV/J,EAAAC,EAAAC,cAACkK,EAAD,CACF3J,MAAO+B,KAAKqE,aACZlG,iBAAkB,kBAAMuI,EAAKZ,cAYnC,OACEtI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACZ6E,GAEHhF,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAM0I,EAAKZ,YACzBtI,EAAAC,EAAAC,cAACmK,EAAA,EAAD,CAEEC,KAAMC,OAGRvK,EAAAC,EAAAC,cAACsK,EAAD,CACE/J,MAAO+B,KAAKiC,QACZlD,YAAaiB,KAAKI,MAAM7B,OAGzBoJ,EAIArJ,UAtlBS2J,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1E,MACvB,2DCZN2E,IAASC,OAAO/K,EAAAC,EAAAC,cAAC8K,EAAD,MAAS5F,SAASI,eAAe,SD2H3C,kBAAmBgD,WACrBA,UAAUyC,cAAcC,MAAMxH,KAAK,SAAAyH,GACjCA,EAAaC,eCvHnBhG,SAASiG,YAAc,SAAUlG,GAC7BA,EAAEiB","file":"static/js/main.d2e65f64.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst form = (props) => {\n\n    return (\n\n        <div className=\"Form\">\n            \n            <input id=\"city\" type=\"text\" name=\"city\" placeholder=\"City or Zipcode\" />\n            <input id=\"country\" type=\"text\" name=\"country\" placeholder=\"Country\"/>\n            <input onClick={props.click} type=\"submit\" value=\"Submit\"/>\n            <div onClick={props.hideSearchScreen}>XXX</div>\n        </div>\n    )\n};\n\nexport default form;","import React from 'react';\n\nconst weather = (props) => {\n\n    \n\n    return (\n\n        <div className=\"Weather\">\n          <p> The current temp in {props.city} is {props.temp} \n          °<span>{props.unit}</span>\n          </p>\n          <p>Humidity: {props.humidity}%</p>\n          <p> Sunrise: {props.sunrise}</p>\n          <p> Sunrise: {props.sunset}</p>\n          <p>Wind: {props.windDirection} {props.windspeed} mph</p>\n          <p> Pressure: {props.pressure} inHg</p>\n          <p>Current Time: {props.time}</p>\n        </div>\n    )\n};\n\nexport default weather;","import React from 'react';\n\nconst unit = (props) => {\n\n    \n\n    return (\n\n        <div className=\"Unit\">\n          <div className={props.currentUnit === \"C\" ? 'currentUnit' : null} onClick={props.click}> °C</div>&nbsp;/&nbsp;\n          <div className={props.currentUnit === \"F\" ? 'currentUnit' : null} onClick={props.click}> °F</div>\n        </div>\n    )\n};\n\nexport default unit;","import React from 'react';\n\nconst city = (props) => {\n\n    return (\n\n        <div id={`city${props.id}`}className=\"CityParentContainer\"\n        onMouseDown={props.lock} \n        onTouchStart={props.lock} \n        onMouseUp={props.move} \n        onTouchEnd={props.move} \n        onMouseMove={props.drag}\n        onTouchMove={props.drag} \n        onWheel={props.preventScroll}\n        >\n                <div  className=\"City\">\n                    <div className=\"cityContainerLeft\">\n                        <div className=\"cityTime\"> {props.time}</div>\n                        <div className=\"cityName\">{props.city}</div>\n                    </div>\n                    <div className=\"cityContainerRight\">\n                        <p>{props.temp}°</p>\n                    </div>\n                </div>\n                <div onClick={props.click} onTouchStart={props.click} className=\"deleteBtn\">\n                    Delete\n                </div>\n        </div>\n    )\n};\n\nexport default city;","import React, { Component } from 'react';\nimport './App.css';\nimport './City/City.css';\nimport './Unit/Unit.css';\nimport './Form/Form.css';\nimport Form from './Form/Form.js';\nimport Weather from './Weather/Weather.js';\nimport Unit from './Unit/Unit.js';\nimport City from './City/City.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.xAxisLocation = null\n  }\n\n  state = {\n    temp: undefined,\n    unit: \"F\",\n    city: undefined,\n    humidity: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    windspeed: undefined,\n    windDirection: undefined,\n    precipitation: undefined,\n    currentTime: undefined,\n    gmtOffset: undefined,\n    listOfCities: [],\n    showSearchScreen: false,\n  }\n\n  currentTemp = (lat, lon) => {\n    let apiKey = process.env.REACT_APP_API_KEY\n    let timeZoneAPIkey = process.env.REACT_APP_TIMEZONE_API_KEY\n    let that = this\n    let gmtOffset\n    let listOfCities\n    let city\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${apiKey}&units=imperial`)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        console.log(myJson)\n        console.log(myJson.name)\n        console.log(myJson.coord.lat)\n        listOfCities = [...that.state.listOfCities]\n        city = {\n          name: myJson.name,\n          temp: myJson.main.temp,\n          cityId: myJson.id\n        }\n        // city.name = myJson.name\n        listOfCities.push(city)\n        that.setState({\n          listOfCities: listOfCities\n        });\n\n        fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=${timeZoneAPIkey}&format=json&by=position&lat=${myJson.coord.lat}&lng=${myJson.coord.lon}`)\n          .then(function (response) {\n            console.log(response)\n            console.log(\"timezone\")\n            return response.json();\n          })\n          .then(function (myJson) {\n            gmtOffset = myJson.gmtOffset\n            gmtOffset /= 3600\n            console.log(myJson)\n            city.gmtOffset = gmtOffset\n          })\n      })\n\n  }\n\n  secondsInterval = setInterval(\n    () => this.updateTime2(),\n    1000)\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log(position.coords.latitude)\n        console.log(position.coords.longitude)\n        this.currentTemp(position.coords.latitude, position.coords.longitude)\n      })\n\n    setTimeout(\n      () =>\n        setInterval(\n          () => this.updateTime(),\n          60000)\n\n      , (60000 - ((new Date().getSeconds()) * 1000))\n    )\n  }\n\n  updateTime() {\n    this.setState({\n      currentTime: new Date()\n    });\n  }\n\n  updateTime2() {\n\n    if (new Date().getSeconds() === 0) {\n      clearInterval(this.secondsInterval)\n    }\n    this.setState({\n      currentTime: new Date()\n    });\n  }\n\n  setUnit = (event) => {\n\n    let currentUnit\n    let setTemp\n\n    let listOfCities = [...this.state.listOfCities]\n\n    if (event.target.innerText === \"°F\") {\n      currentUnit = \"F\"\n\n      if (this.state.unit === \"C\") {\n        setTemp = (this.state.temp * 9 / 5) + 32\n\n        listOfCities = listOfCities.map((city) => {\n          city.temp = (city.temp * 9 / 5) + 32\n          return city\n\n        })\n\n      } else {\n        setTemp = this.state.temp\n      }\n\n    } else {\n      currentUnit = \"C\"\n      if (this.state.unit === \"F\") {\n        setTemp = (this.state.temp - 32) * 5 / 9\n        listOfCities = listOfCities.map((city) => {\n          city.temp = (city.temp - 32) * 5 / 9\n          return city\n\n        })\n      } else {\n        setTemp = this.state.temp\n      }\n\n    }\n\n    this.setState({\n      listOfCities: listOfCities,\n      unit: currentUnit,\n\n    });\n  }\n\n  deleteCity = (cityIndex) => {\n    if (cityIndex !== 0) {\n      const cities = [...this.state.listOfCities];\n      cities.splice(cityIndex, 1);\n      this.setState({ listOfCities: cities });\n    }\n  }\n\n  unify(e) { return e.changedTouches ? e.changedTouches[0] : e };\n\n  lock = (whichCity, e) => {\n    document.body.style.position = \"fixed\"\n    console.log(document.getElementById(`city${whichCity}`).style.transform)\n    console.log(whichCity)\n    console.log(\"djdnjdnjd\")\n    let unify = e.changedTouches ? e.changedTouches[0] : e\n\n    this.xAxisLocation = unify.clientX\n    console.log(this.xAxisLocation)\n\n    document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n\n  }\n\n  move = (whichCity, e) => {\n    document.body.style.position = \"static\"\n\n    document.body.style.overflow = \"visible\"\n\n    if (this.xAxisLocation || this.xAxisLocation === 0) {\n      let unify = e.changedTouches ? e.changedTouches[0] : e\n      let dx = unify.clientX - this.xAxisLocation, s = Math.sign(dx);\n\n      let dragAmount = document.getElementById(`city${whichCity}`).style.transform;\n      dragAmount = dragAmount.match(/\\d+/g)[0]\n      if (dragAmount < 80) {\n        document.getElementById(`city${whichCity}`).style.transform = \"translate(0px)\";\n      }\n      this.xAxisLocation = null\n    }\n\n  }\n\n  preventScroll = (whichCity, e) => {\n\n    e.preventDefault();\n\n    console.log(\"Whyis it scrolling?\")\n  }\n\n  drag = (whichCity, e) => {\n    e.preventDefault();\n\n    if (this.xAxisLocation !== 0) {\n      document.body.style.overflow = \"hidden\"\n    }\n\n    if (this.xAxisLocation || this.xAxisLocation === 0) {\n      let unify = e.changedTouches ? e.changedTouches[0] : e\n      let amount = Math.round(unify.clientX - this.xAxisLocation)\n\n      if (amount <= -80) {\n        amount = -80\n      }\n      if (amount >= 0) {\n        amount = 0\n      }\n      document.getElementById(`city${whichCity}`).style.transform = `translate(${amount}px)`\n    }\n  };\n\n  updateCity = (cityObj) => {\n\n    let newNonsense = this.state.nonsense\n    newNonsense++\n\n    let that = this\n\n    let unit\n    let setUnit\n    let listOfCities = [...this.state.listOfCities]\n    let apiKey = process.env.REACT_APP_API_KEY\n    let cityId = cityObj.cityId\n\n    if (this.state.unit === \"F\") {\n      unit = 'imperial'\n      setUnit = \"F\"\n    } else {\n      unit = 'metric'\n      setUnit = \"C\"\n    }\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?id=${cityId}&APPID=${apiKey}&units=${unit}`)\n      .then(function (response) {\n        return response.json();\n      }).then(function (myJson) {\n\n\n        if (myJson.main !== undefined) {\n          const currentTemp = myJson.main.temp\n          console.log(currentTemp)\n\n          for (let i = 0; i < listOfCities.length; i++) {\n\n            if (listOfCities[i].cityId === cityId) {\n              listOfCities[i].temp = currentTemp\n              break\n            }\n          }\n\n          that.setState({\n            listOfCities: listOfCities,\n            nonsense: newNonsense\n\n          });\n\n\n        }\n\n      })\n\n  }\n\n\n  fetchWeather = () => {\n\n    let that = this\n    let cityOrZipValue = document.getElementById(\"city\").value\n    let typeOfQuery = 'q'\n    let unit\n    let setUnit\n    let city\n    let humidity\n    let pressure\n    let listOfCities = [...this.state.listOfCities]\n    let cityObj = {}\n    let sun\n    let gmtOffset\n\n    if (/\\d/.test(cityOrZipValue)) {\n      typeOfQuery = 'zip'\n    }\n    let country = document.getElementById(\"country\").value\n\n    if (country.toLowerCase() === \"united states\") {\n      country = 'us'\n    }\n\n    if (this.state.unit === \"F\") {\n      unit = 'imperial'\n      setUnit = \"F\"\n    } else {\n      unit = 'metric'\n      setUnit = \"C\"\n    }\n\n    let apiKey = process.env.REACT_APP_API_KEY\n    let timeZoneAPIkey = process.env.REACT_APP_TIMEZONE_API_KEY\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?${typeOfQuery}=${cityOrZipValue},${country}&APPID=${apiKey}&units=${unit}`)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n\n\n        if (myJson.main !== undefined) {\n          const currentTemp = myJson.main.temp\n          city = myJson.name\n          humidity = myJson.main.humidity\n          pressure = (myJson.main.pressure / 33.863886666667).toFixed(2)\n\n          // cityObj = {\n          //   name: city,\n          //   temp: currentTemp,\n          //   cityId: myJson.id\n          // }\n\n          fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=${timeZoneAPIkey}&format=json&by=position&lat=${myJson.coord.lat}&lng=${myJson.coord.lon}`)\n            .then(function (response) {\n              sun = myJson.sys.sunrise\n\n              console.log(response)\n              console.log(\"timezone\")\n              return response.json();\n            })\n            .then(function (myJson) {\n              var t = new Date(sun * 1000);\n              gmtOffset = myJson.gmtOffset\n              gmtOffset /= 3600\n              console.log(t)\n              let hour = ('0' + t.getUTCHours()).slice(-2)\n              hour = parseInt(hour)\n              hour += gmtOffset\n              console.log(`The GMTOFFSET is ${gmtOffset}`)\n              cityObj.gmtOffset = gmtOffset\n              that.setState({\n                gmtOffset: gmtOffset\n              });\n\n              var formatted = hour + ':' + ('0' + t.getUTCMinutes()).slice(-2);\n              console.log(formatted)\n            })\n\n          let cityAlreadyListed = false\n\n\n          cityObj.name = city\n          cityObj.temp = currentTemp\n          cityObj.cityId = myJson.id\n          cityObj.sunrise = myJson.sys.sunrise\n          cityObj.sunset = myJson.sys.sunset\n          cityObj.windspeed = myJson.wind.speed\n          cityObj.windDirection = myJson.wind.deg\n          cityObj.pressure = pressure\n\n\n\n          console.log(`Motha Fucka ${cityObj}`)\n          console.log(cityObj)\n\n          for (let i = 0; i < listOfCities.length; i++) {\n            console.log(`cityId just search is ${myJson.id}`)\n            console.log(\"blahBlah\")\n            console.log(listOfCities[i].cityId)\n            if (listOfCities[i].cityId === myJson.id) {\n              cityAlreadyListed = true\n              break\n            }\n          }\n\n          if (cityAlreadyListed === false) {\n            listOfCities.push(cityObj)\n          }\n\n          setInterval(\n            () => that.updateCity(cityObj),\n            60000)\n\n          that.setState({\n            temp: currentTemp,\n            unit: setUnit,\n            city: city,\n            humidity: humidity,\n            sunrise: myJson.sys.sunrise,\n            sunset: myJson.sys.sunset,\n            windspeed: myJson.wind.speed,\n            windDirection: myJson.wind.deg,\n            pressure: pressure,\n            listOfCities: listOfCities\n          });\n\n\n        }\n      })\n\n\n\n\n\n  }\n\n  showLocalTime = (time) => {\n    var localUTC = new Date(this.state.currentTime);\n    let localHour = ('0' + localUTC.getUTCHours()).slice(-2)\n    localHour = parseInt(localHour)\n    localHour += time\n    let localAMorPM = \"AM\"\n    if (localHour < 0) {\n      localHour = 12 + localHour\n      localAMorPM = \"PM\"\n    }\n    else if (localHour > 11) {\n      localAMorPM = \"PM\"\n      localHour -= 12\n\n      if (localHour === 0) {\n        localHour = 12\n      }\n\n    }\n\n\n    var formattedlocalTime = localHour + ':' + ('0' + localUTC.getUTCMinutes()).slice(-2) + localAMorPM;\n\n    return formattedlocalTime\n\n  }\n\n  clicker = () => {\n\n    this.setState({\n      showSearchScreen: !this.state.showSearchScreen\n    });\n  }\n\n  render() {\n\n    var sunriseUTC = new Date(this.state.sunrise * 1000);\n    let sunriseHour = ('0' + sunriseUTC.getUTCHours()).slice(-2)\n    sunriseHour = parseInt(sunriseHour)\n    sunriseHour += this.state.gmtOffset\n\n    let newSunriseAMorPM = \"AM\"\n    if (sunriseHour > 11) {\n      newSunriseAMorPM = \"PM\"\n      sunriseHour -= 12\n    }\n    var formattedSunrise = sunriseHour + ':' + ('0' + sunriseUTC.getUTCMinutes()).slice(-2);\n    var sunsetUTC = new Date(this.state.sunset * 1000);\n    let sunsetHour = ('0' + sunsetUTC.getUTCHours()).slice(-2)\n    sunsetHour = parseInt(sunsetHour)\n    sunsetHour += this.state.gmtOffset\n    let newSunsetAMorPM = \"PM\"\n    if (sunsetHour < 12) {\n      newSunsetAMorPM = \"AM\"\n    } else {\n      sunsetHour -= 12\n    }\n\n    var formattedSunset = sunsetHour + ':' + ('0' + sunsetUTC.getUTCMinutes()).slice(-2);\n    let temp = null\n    let windDirection\n    let windDegrees = this.state.windDirection\n\n    if (windDegrees > 348.75 || windDegrees <= 11.25) {\n      windDirection = \"E\"\n    } else if (windDegrees > 11.25 || windDegrees <= 33.75) {\n      windDirection = \"NNE\"\n    } else if (windDegrees > 33.75 || windDegrees <= 56.25) {\n      windDirection = \"NE\"\n    } else if (windDegrees > 56.25 || windDegrees <= 78.75) {\n      windDirection = \"ENE\"\n    } else if (windDegrees > 78.75 || windDegrees <= 101.25) {\n      windDirection = \"E\"\n    } else if (windDegrees > 101.25 || windDegrees <= 123.75) {\n      windDirection = \"ESE\"\n    } else if (windDegrees > 123.75 || windDegrees <= 146.25) {\n      windDirection = \"SE\"\n    } else if (windDegrees > 146.25 || windDegrees <= 168.75) {\n      windDirection = \"SSE\"\n    } else if (windDegrees > 168.75 || windDegrees <= 191.25) {\n      windDirection = \"S\"\n    } else if (windDegrees > 191.25 || windDegrees <= 213.75) {\n      windDirection = \"SSW\"\n    } else if (windDegrees > 213.75 || windDegrees <= 236.25) {\n      windDirection = \"SW\"\n    } else if (windDegrees > 236.25 || windDegrees <= 258.75) {\n      windDirection = \"WSW\"\n    } else if (windDegrees > 258.75 || windDegrees <= 281.25) {\n      windDirection = \"W\"\n    } else if (windDegrees > 281.25 || windDegrees <= 303.75) {\n      windDirection = \"WNW\"\n    } else if (windDegrees > 303.75 || windDegrees <= 326.25) {\n      windDirection = \"NW\"\n    } else {\n      windDirection = \"NNW\"\n    }\n\n    if (this.state.temp) {\n\n      temp = (\n        <div>\n          <Weather temp={Math.round(this.state.temp)} unit={this.state.unit} city={this.state.city} humidity={this.state.humidity}\n            sunrise={`${formattedSunrise} ${newSunriseAMorPM}`}\n            sunset={`${formattedSunset} ${newSunsetAMorPM}`}\n            windspeed={Math.round(this.state.windspeed)}\n            windDirection={windDirection}\n            pressure={this.state.pressure}\n            time={this.state.currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n\n          />\n        </div>\n      )\n    }\n\n    let cities = (\n      <div>\n\n        {this.state.listOfCities.map((city, index) => {\n          return <City\n            city={city.name}\n            temp={Math.round(city.temp)}\n            unit={this.state.unit}\n            key={index}\n            id={index}\n            click={() => this.deleteCity(index)}\n            time={this.showLocalTime(city.gmtOffset)}\n            lock={(e) => this.lock(index, e)}\n            move={(e) => this.move(index, e)}\n            drag={(e) => this.drag(index, e)}\n            preventScroll={(e) => this.preventScroll(index, e)}\n\n          />\n        })}\n      </div>\n    );\n\n    let showOrHide\n    if (this.state.showSearchScreen === true) {\n      showOrHide = \"showScreen\"\n    } else {\n      showOrHide = \"hideScreen\"\n    }\n\n\n\n\n\n\n    let searchScreen = (\n\n\n      <div className={showOrHide} >\n            <Form\n          click={this.fetchWeather}\n          hideSearchScreen={() => this.clicker()}\n\n        />\n\n\n\n      </div>\n\n\n\n    )\n\n    return (\n      <div className=\"App\">\n        <div className=\"cityListContainer\">\n          {cities}\n        </div>\n        <div onClick={() => this.clicker()} > \n        <FontAwesomeIcon\n          \n          icon={faPlus} />\n          </div>\n\n        <Unit\n          click={this.setUnit}\n          currentUnit={this.state.unit}\n        />\n\n        {searchScreen}\n\n\n\n        {temp}\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\ndocument.ontouchmove = function (e) {\n    e.preventDefault();\n  }\n//   var vpH = window.innerHeight;\n//   document.documentElement.style.height = vpH.toString() + \"px\";\n//   document.body.style.height = vpH.toString() + \"px\";"],"sourceRoot":""}